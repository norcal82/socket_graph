// Generated by CoffeeScript 1.9.3
(function() {
  'use strict';
  var autoprefixer, browserSync, coffee, concat, gulp, gutil, jade, jshint, minifyHTML, minifycss, notify, plumber, reload, rename, sass, stylish, target, uglify;

  gulp = require('gulp');

  jade = require('gulp-jade');

  minifyHTML = require('gulp-minify-html');

  sass = require('gulp-sass');

  coffee = require('gulp-coffee');

  minifycss = require('gulp-minify-css');

  autoprefixer = require('gulp-autoprefixer');

  jshint = require('gulp-jshint');

  uglify = require('gulp-uglify');

  stylish = require('jshint-stylish');

  rename = require('gulp-rename');

  concat = require('gulp-concat');

  notify = require('gulp-notify');

  gutil = require('gulp-util');

  plumber = require('gulp-plumber');

  browserSync = require('browser-sync');

  reload = browserSync.reload;

  target = {
    template_src: 'dev/templates/*.jade',
    sass_src: 'dev/scss/**/*.scss',
    cs_src: 'dev/js/*.coffee',
    js_lint_src: ['js/**/*.js'],
    js_uglify_src: [''],
    js_concat_src: ['js/**/*.js'],
    css_dest: 'prod/css',
    js_dest: 'prod/js'
  };

  gulp.task('compile-coffee', function() {
    return gulp.src(target.cs_src).pipe(coffee({
      bare: true
    }).on('error', gutil.log)).pipe(gulp.dest('./prod/js'));
  });

  gulp.task('minify-html', function() {
    var opts;
    opts = {
      comments: false,
      spare: true
    };
    return gulp.src('./prod/*.html').pipe(minifyHTML(opts)).pipe(gulp.dest('html'));
  });

  gulp.task('sass', function() {
    return gulp.src(target.sass_src).pipe(plumber()).pipe(sass()).pipe(autoprefixer('last 2 version', '> 1%', 'ie 8', 'ie 9', 'ios 6', 'android 4')).pipe(minifycss()).pipe(concat('main.css')).pipe(gulp.dest(target.css_dest)).pipe(reload({
      stream: true
    }));
  });

  gulp.task('js-lint', function() {
    return gulp.src(target.js_lint_src).pipe(jshint()).pipe(jshint.reporter(stylish));
  });

  gulp.task('js-uglify', function() {
    return gulp.src(target.js_uglify_src).pipe(uglify()).pipe(rename(function(dir, base, ext) {
      var trunc;
      trunc = base.split('.')[0];
      return trunc + '.min' + ext;
    })).pipe(gulp.dest(target.js_dest));
  });

  gulp.task('js-concat', function() {
    return gulp.src(target.js_concat_src).pipe(uglify()).pipe(concat('main.min.js')).pipe(gulp.dest(target.js_dest));
  });

  gulp.task('browser-sync', function() {
    return browserSync({
      proxy: 'http://localhost:3000'
    });
  });

  gulp.task('templates', function() {
    return gulp.src('dev/templates/*.jade').pipe(plumber()).pipe(jade({
      pretty: true
    })).pipe(gulp.dest('./prod/')).pipe(reload({
      stream: true
    }));
  });

  gulp.task('default', ['templates', 'browser-sync', 'sass'], function() {
    gulp.watch(target.template_src, ['templates', 'minify-html']);
    gulp.watch(target.sass_src, ['sass']);
    gulp.watch(target.cs_src, ['compile-coffee']);
    gulp.watch(target.js_lint_src, ['js-lint']);
    gulp.watch(target.js_minify_src, ['js-uglify']);
    return gulp.watch(target.js_concat_src, ['js-concat']);
  });

}).call(this);
