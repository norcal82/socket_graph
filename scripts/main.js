// Generated by CoffeeScript 1.9.3
(function() {
  var socket;

  socket = io.connect('http://localhost:3000', {
    'force new connection': true
  });

  $(function() {
    var chart, chart1, color_palette, del, generateChart, get, post, put, send, sensor_counts, sensor_counts1, waiting;
    generateChart = function(target, data, color) {};
    send = function() {
      socket.emit('clieantMessage', 'whats up from send', navigator.platform);
    };
    waiting = function() {
      $('pre').text('Waiting').css('color', 'dodgerblue').fadeIn('fast');
    };
    get = 0;
    post = 0;
    del = 0;
    put = 0;
    color_palette = ['#1abc9c', '#3498db', '#e74c3c', '#f39c12'];
    socket.on('getRequest', function(data) {
      console.log('get reuqest');
      get = get + 1;
      chart1.load({
        columns: [['GET', get], ['POST', post], ['DELETE', del], ['PUT', put]]
      });
    });
    socket.on('station_created', function(data) {
      console.log('new station created and registered');
      console.log(data);
    });
    sensor_counts = ['station: 2'];
    sensor_counts1 = ['station: 5'];
    socket.on('countRecieved', function(data) {
      post = post + 1;
      chart1.load({
        columns: [['GET', get], ['POST', post], ['DELETE', del], ['PUT', put]]
      });
      console.log('count is incremented');
      console.log(data);
      if (data._id === '2') {
        sensor_counts.push(data._count);
        console.log('station 2');
        if (sensor_counts.length === 30) {
          console.log('arr is 5');
          console.log(sensor_counts);
          sensor_counts.splice(1, 1);
          console.log(sensor_counts);
        }
      } else {
        sensor_counts1.push(data._count);
        if (sensor_counts1.length === 30) {
          sensor_counts1.splice(1, 1);
        }
      }
      chart.load({
        columns: [sensor_counts, sensor_counts1]
      });
    });
    chart = c3.generate({
      data: {
        columns: [sensor_counts, sensor_counts1],
        type: 'area-spline'
      },
      color: {
        pattern: color_palette
      }
    });
    chart1 = c3.generate({
      bindto: '#chart1',
      data: {
        columns: [['GET', get], ['POST', post], ['DELETE', del], ['PUT', put]],
        type: 'donut'
      },
      donut: {
        title: 'HTTP Actions'
      },
      color: {
        pattern: color_palette
      }
    });
  });

}).call(this);
